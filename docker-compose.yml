# docker-compose.yml
services:
  nginx:
    image: nginx:latest
    volumes:
      - ./nginx/conf.d/:/etc/nginx/templates/
      - ./nginx/certbot/:/var/www/certbot/:ro
      - ./nginx/certs/:/etc/nginx/ssl/:ro
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - webapp
    environment:
      - DOMAIN_URL=${DOMAIN_URL}
    networks:
      - internal

  server:
    command: /bin/bash -c "chmod +x ./docker/server/entrypoint.sh && ./docker/server/entrypoint.sh"
    build:
      context: ./docker/server
      dockerfile: Dockerfile
    volumes:
      - .:/app
    depends_on:
      - db
      - redis
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - DATABASE_PASSWORD=${DATABASE_PASSWORD}
    networks:
      - internal

  customer_bot:
    build:
      context: ./docker/customer_bot
    volumes:
      - .:/app
    command: "python apps/customer_bot/bot.py"
    depends_on:
      - server
      - redis
    environment:
      - TELEGRAM_TOKEN=${TELEGRAM_TOKEN}
      - DOMAIN_URL=${DOMAIN_URL}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - SERVER_URL=http://server:8000
    networks:
      - internal

  kitchen:
    build:
      context: ./docker/kitchen
    volumes:
      - .:/app
    command: "python apps/kitchen/bot.py"
    depends_on:
      - server
      - redis
    environment:
      - TELEGRAM_TOKEN=${KITCHEN_BOT_TOKEN}
      - KITCHEN_TG_ID=${KITCHEN_TG_ID}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - SERVER_URL=http://server:8000
    networks:
      - internal

  webapp:
    build:
      context: ./docker/webapp
    volumes:
      - ./apps/webapp/:/app
      - ./libs:/app/libs
      - ./frontend:/app/frontend
    command:
      [
        "uvicorn",
        "main:app",
        "--host",
        "0.0.0.0",
        "--port",
        "8000"
      ]
    depends_on:
      - server
    environment:
      - TELEGRAM_TOKEN=${TELEGRAM_TOKEN}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - SERVER_URL=http://server:8000
    networks:
      - internal

  adminer:
    image: adminer
    restart: always
    depends_on:
      - db
    ports:
      - 8080:8080
    networks:
      - internal

  db:
    image: postgres:latest
    restart: always
    environment:
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_DB: db
    volumes:
      - ./database:/var/lib/postgresql
    networks:
      - internal

  redis:
    image: "redis:alpine"
    container_name: redis
    networks:
      - internal

  certbot:
    image: certbot/certbot:latest
    volumes:
      - ./nginx/certbot/:/var/www/certbot/:rw
      - ./nginx/certs/:/etc/letsencrypt/:rw

networks:
  internal:
    driver: bridge

volumes:
  db_data:
