"""Add delivery and payment

Revision ID: e396090eb822
Revises: f31e044e4dd2
Create Date: 2024-08-20 11:54:47.773057

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

import sqlmodel

from sqlalchemy.dialects.postgresql import ENUM


# revision identifiers, used by Alembic.
revision: str = "e396090eb822"
down_revision: Union[str, None] = "f31e044e4dd2"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "paymentintents",
        sa.Column("id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("timestamp_created", sa.DateTime(), nullable=False),
        sa.Column("timestamp_updated", sa.DateTime(), nullable=False),
        sa.Column("amount", sa.Integer(), nullable=False),
        sa.Column(
            "method",
            ENUM(
                "CARD",
                "CASH",
                "CRYPTO_INVOICE",
                name="paymentmethod",
                # create_type=False,
            ),
            nullable=False,
        ),
        sa.Column(
            "status",
            ENUM(
                "CREATED",
                "PENDING",
                "CONFIRMED",
                "FAILED",
                name="paymentstatus",
                create_type=False,
            ),
            nullable=False,
        ),
        sa.Column("payment_details", sa.JSON(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "pickuppoints",
        sa.Column("id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("timestamp_created", sa.DateTime(), nullable=False),
        sa.Column("timestamp_updated", sa.DateTime(), nullable=False),
        sa.Column("address", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("description", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "deliverydetails",
        sa.Column("id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("timestamp_created", sa.DateTime(), nullable=False),
        sa.Column("timestamp_updated", sa.DateTime(), nullable=False),
        sa.Column(
            "method",
            ENUM(
                "SELF_PICKUP",
                "COURIER",
                "PICKUP_POINT",
                name="deliverymethod",
                # create_type=False,
            ),
            nullable=False,
        ),
        sa.Column(
            "status",
            ENUM(
                "PENDING",
                "IN_PROGRESS",
                "COMPLETED",
                "FAILED",
                name="deliverystatus",
                # create_type=False,
            ),
            nullable=False,
        ),
        sa.Column("address", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("pickup_point_id", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("delivery_time", sa.DateTime(), nullable=True),
        sa.Column("courier_id", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("additional_info", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.ForeignKeyConstraint(
            ["pickup_point_id"],
            ["pickuppoints.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.drop_table("pickuppoint")
    op.add_column(
        "orders",
        sa.Column("payment_id", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    )
    op.add_column(
        "orders",
        sa.Column("delivery_id", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    )
    op.create_foreign_key(None, "orders", "deliverydetails", ["delivery_id"], ["id"])
    op.create_foreign_key(None, "orders", "paymentintents", ["payment_id"], ["id"])
    op.drop_column("orders", "is_paid")
    op.drop_column("orders", "details")
    op.drop_column("orders", "payment")
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "orders",
        sa.Column(
            "payment",
            postgresql.ENUM(
                "NONE",
                "INVOICE_CREATED",
                "INVOICE_SUBMITTED",
                "INVOICE_APPROVED",
                "IN_CASH",
                "PAYED",
                name="paymentstatus",
            ),
            autoincrement=False,
            nullable=False,
        ),
    )
    op.add_column(
        "orders", sa.Column("details", sa.VARCHAR(), autoincrement=False, nullable=True)
    )
    op.add_column(
        "orders",
        sa.Column("is_paid", sa.BOOLEAN(), autoincrement=False, nullable=False),
    )
    op.drop_constraint(None, "orders", type_="foreignkey")
    op.drop_constraint(None, "orders", type_="foreignkey")
    op.drop_column("orders", "delivery_id")
    op.drop_column("orders", "payment_id")
    op.create_table(
        "pickuppoint",
        sa.Column("id", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column(
            "timestamp_created",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "timestamp_updated",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("adress", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("description", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.PrimaryKeyConstraint("id", name="pickuppoint_pkey"),
    )
    op.drop_table("deliverydetails")
    op.drop_table("pickuppoints")
    op.drop_table("paymentintents")
    # ### end Alembic commands ###
